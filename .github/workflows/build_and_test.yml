name: Build and Test

on:
  workflow_dispatch:

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      # Set to false to test all configurations
      fail-fast: false

      matrix:
        os: [windows-latest, ubuntu-latest, macos-latest]
        build_type: [Release]
        include:
          - os: windows-latest
            build_type: Release
          - os: ubuntu-latest
            build_type: Release
            cpp_compiler: g++
          - os: macos-latest
            build_type: Release
            cpp_compiler: g++

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Cache build outputs
      uses: actions/cache@v4
      with:
        path: |
          build
        key: ${{ runner.os }}-build-${{ hashFiles('**/CMakeLists.txt') }}
        restore-keys: |
            ${{ runner.os }}-build-

    - name: Setup MSVC
      if: matrix.os == 'windows-latest'
      uses: ilammy/msvc-dev-cmd@v1.13.0

    - name: Set Build Output Directory
      id: strings
      shell: bash
      run: |
        echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"
      
    - name: Configure CMake (Unix)
      if: matrix.os != 'windows-latest'
      run: >
        cmake -B ${{ steps.strings.outputs.build-output-dir }}
        -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }}
        -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
        -S ${{ github.workspace }}

    - name: Configure CMake (Windows)
      if: matrix.os == 'windows-latest'
      run: >
          cmake -B ${{ steps.strings.outputs.build-output-dir }}
          -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
          -G "Visual Studio 17 2022" -A x64
          -S ${{ github.workspace }} 

    - name: Build
      run: cmake --build ${{ steps.strings.outputs.build-output-dir }} --config ${{ matrix.build_type }}

    - name: Generate Test Data
      run: python tests/generate_test_data.py
      working-directory: ${{ github.workspace }}

    - name: Test          
      run: ctest --build-config ${{ matrix.build_type }} --output-on-failure --verbose
      working-directory: ${{ steps.strings.outputs.build-output-dir }}

    - name: Upload Linux
      if: matrix.os == 'ubuntu-latest'
      uses: actions/upload-artifact@v4
      with:
        name: palloc-linux
        path: build/palloc
        if-no-files-found: error

    - name: Upload Windows
      if: matrix.os == 'windows-latest'
      uses: actions/upload-artifact@v4
      with:
        name: palloc-win
        path: build/Release/palloc.exe
        if-no-files-found: error
    
    - name: Upload macOS
      if: matrix.os == 'macos-latest'
      uses: actions/upload-artifact@v4
      with:
        name: palloc-macos
        path: build/palloc
        if-no-files-found: error
        
